dnl Process this file with autoconf to produce a configure script.
dnl $Id: $

AC_INIT([fuppes], [0.7.2], [u-voelkel@users.sourceforge.net])
AM_CONFIG_HEADER(src/config.h)
AM_INIT_AUTOMAKE(fuppes, 0.7.2, u-voelkel@users.sourceforge.net)

AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LIBTOOL

dnl Checks for programs.

# pkg-config macro
AC_DEFUN([PKG_CHECK_MODULES], [
  succeeded=no

  if test -z "$PKG_CONFIG"; then
    AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
  fi

  if test "$PKG_CONFIG" = "no" ; then
     echo "*** The pkg-config script could not be found. Make sure it is"
     echo "*** in your path, or set the PKG_CONFIG environment variable"
     echo "*** to the full path to pkg-config."
     echo "*** Or see http://www.freedesktop.org/software/pkgconfig to get pkg-config."
  else
     #PKG_CONFIG_MIN_VERSION=0.9.0
     #if $PKG_CONFIG --atleast-pkgconfig-version $PKG_CONFIG_MIN_VERSION; then
        AC_MSG_CHECKING(for $2)

        if $PKG_CONFIG --exists "$2" ; then
            AC_MSG_RESULT(yes)
            succeeded=yes

            AC_MSG_CHECKING($1_CFLAGS)
            $1_CFLAGS=`$PKG_CONFIG --cflags "$2"`
            AC_MSG_RESULT($$1_CFLAGS)

            AC_MSG_CHECKING($1_LIBS)
            $1_LIBS=`$PKG_CONFIG --libs "$2"`
            AC_MSG_RESULT($$1_LIBS)
        else
            $1_CFLAGS=""
            $1_LIBS=""
            AC_MSG_RESULT([no])
        fi

        AC_SUBST($1_CFLAGS)
        AC_SUBST($1_LIBS)
     #else
     #   echo "*** Your version of pkg-config is too old. You need version $PKG_CONFIG_MIN_VERSION or newer."
     #   echo "*** See http://www.freedesktop.org/software/pkgconfig";
     #fi
  fi

  if test $succeeded = yes; then
     ifelse([$3], , :, [$3])
  else
     ifelse([$4], , AC_MSG_ERROR([Library requirements ($2) not met; consider 
adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a 
nonstandard prefix so pkg-config can find them.]), [$4])
  fi
])
# end pkg-config macro


FUPPES_CFLAGS=""
FUPPES_LIBS=""

dnl Checks for libraries.
PKG_CHECK_MODULES(PCRE, libpcre >= 5.0)
PKG_CHECK_MODULES(LIBXML, libxml-2.0 >= 2.6.1)
PKG_CHECK_MODULES(SQLITE3, sqlite3 >= 3.2)
PTHREAD_LIBS=""
AC_CHECK_LIB(pthread, pthread_create, PTHREAD_LIBS="-lpthread")

# uuid
have_uuid=no
AH_TEMPLATE([HAVE_UUID], [])
AC_CHECK_LIB(uuid, uuid_generate, have_uuid=yes, have_uuid=no)
if test "x$have_uuid" = "xyes"; then
  AC_DEFINE([HAVE_UUID], [1], [])
  FUPPES_LIBS="$FUPPES_LIBS -luuid"
fi

# gamin
#have_gamin=no
#AH_TEMPLATE([HAVE_GAMIN], [])
#PKG_CHECK_MODULES(GAMIN, gamin, have_gamin=yes, have_gamin=no)
#if test "x$have_gamin" = "xyes"; then
#  FUPPES_CFLAGS="$FUPPES_CFLAGS $GAMIN_CFLAGS"
#  FUPPES_LIBS="$FUPPES_LIBS $GAMIN_LIBS"
#  AC_DEFINE([HAVE_GAMIN], [1], [])
#fi

# iconv()
use_iconv=yes
AC_ARG_ENABLE(iconv, 
            [  --disable-iconv  Do not use iconv],
            [ use_iconv=no; ] )

if test "x$use_iconv" = "xyes"; then

have_iconv=no
AH_TEMPLATE([HAVE_ICONV], [])
AH_TEMPLATE([ICONV_SECOND_ARG], [second argument of iconv])
AC_MSG_CHECKING([for type of second arg to iconv])
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
       #include <sys/types.h>
			 #include <iconv.h>
       #include <unistd.h>
  ]], [[ 
			 size_t iconv (iconv_t cd,
							const char* * inbuf, size_t * inbytesleft,
              char* * outbuf, size_t * outbytesleft); 
  ]])],[
   AC_DEFINE([ICONV_SECOND_ARG], [const char**], [])
	 AC_DEFINE([HAVE_ICONV], [1], [])
	 have_iconv=yes
   AC_MSG_RESULT([const char**])
  ],[ 
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
       #include <sys/types.h>
			 #include <iconv.h>
       #include <unistd.h>
  ]], [[  
       size_t iconv (iconv_t cd,
							char* * inbuf, size_t * inbytesleft,
              char* * outbuf, size_t * outbytesleft);
  ]])],[
   AC_DEFINE([ICONV_SECOND_ARG], [char**], [])
	 AC_DEFINE([HAVE_ICONV], [1], [])
	 have_iconv=yes
   AC_MSG_RESULT([char**])
  ],[ 
    AC_MSG_NOTICE(cannot determine second iconv argument. see config.log for details)
  ])
])

fi
# end iconv


# TAGLIB
use_taglib=yes
AC_ARG_ENABLE(taglib, 
            [  --disable-taglib  Do not use taglib],
            [ use_taglib=no; ] )
						
have_taglib=no

AH_TEMPLATE([HAVE_TAGLIB], [])

if test "x$use_taglib" = "xyes"; then

if test -z "$TAGLIB_CONFIG"; then
  AC_PATH_PROG(TAGLIB_CONFIG, taglib-config, no)
fi

if test "$TAGLIB_CONFIG" = "no" ; then   
   AC_MSG_NOTICE([*** taglib support disabled ***]);
   #echo "  the taglib-config script could not be found."
   #echo "  taglib support disabled"   
else  
	AC_DEFINE([HAVE_TAGLIB], [1], [])

  AC_MSG_CHECKING(TAGLIB_CFLAGS)
  TAGLIB_CFLAGS=`$TAGLIB_CONFIG --cflags`
	FUPPES_CFLAGS="$FUPPES_CFLAGS $TAGLIB_CFLAGS"
  AC_MSG_RESULT($TAGLIB_CFLAGS)
  
	AC_MSG_CHECKING(TAGLIB_LIBS)
	TAGLIB_LIBS=`$TAGLIB_CONFIG --libs`
  FUPPES_LIBS="$FUPPES_LIBS $TAGLIB_LIBS"
  AC_MSG_RESULT($TAGLIB_LIBS)
  
  have_taglib=yes
fi

fi
# END TAGLIB

#
# ImageMagick (Magick++)
#
use_imagemagick=yes
AC_ARG_ENABLE(imagemagick, 
            [  --disable-imagemagick  Do not use ImageMagick (Magick++)],
            [ use_imagemagick=no; ] )

have_imagemagick=no

AH_TEMPLATE([HAVE_IMAGEMAGICK], [])

if test "x$use_imagemagick" = "xyes"; then


  IMAGEMAGICK_CFLAGS=""
  IMAGEMAGICK_LIBS=""
  PKG_CHECK_MODULES(IMAGEMAGICK, ImageMagick++ >= 6.2.4, have_imagemagick=yes, have_imagemagick=no)

  if test "x$have_imagemagick" = "xyes"; then
		AC_DEFINE([HAVE_IMAGEMAGICK], [1], [])
    FUPPES_CFLAGS="$FUPPES_CFLAGS $IMAGEMAGICK_CFLAGS"
		FUPPES_LIBS="$FUPPES_LIBS $IMAGEMAGICK_LIBS"
  else
    AC_MSG_NOTICE([*** ImageMagick (Magick++) support disabled ***]);
  fi

fi
#end ImageMagick


#
# libavformat
#
AH_TEMPLATE([HAVE_LIBAVFORMAT], [second argument of iconv])
use_libavformat=yes
AC_ARG_ENABLE(libavformat, 
            [  --disable-libavformat  Do not use libavformat (from the FFmpeg package)],
            [ use_libavformat=no; ] )

have_libavformat=no
if test "x$use_libavformat" = "xyes"; then
  LIBAVFORMAT_CFLAGS=""
  LIBAVFORMAT_LIBS=""
  PKG_CHECK_MODULES(LIBAVFORMAT, libavformat, have_libavformat=yes, have_libavformat=no)

  if test "x$have_libavformat" = "xyes"; then
		AC_DEFINE([HAVE_LIBAVFORMAT], [1], [])
    FUPPES_CFLAGS="$FUPPES_CFLAGS -D__STDC_CONSTANT_MACROS $LIBAVFORMAT_CFLAGS"
		FUPPES_LIBS="$FUPPES_LIBS $LIBAVFORMAT_LIBS"
  else
    AC_MSG_NOTICE([*** libavformat (FFmpeg) support disabled ***]);
  fi 
fi
# end libavformat

LAME_LIBS=""
TWOLAME_LIBS=""

MUSEPACK_LIBS=""
FLAC_LIBS=""
transcoding=yes

use_lame=yes
use_twolame=yes

have_encoder=no
have_lame=no
have_twolame=no

have_decoder=no
have_vorbis=no
have_mpc=no
have_flac=no

# transcoding
AC_ARG_ENABLE(transcoding,
            [  --disable-transcoding  Disable on the fly transcoding support],
            [ if test "x$enable_transcoding" = "xno" ; then
                    transcoding=no;
              fi ] )

AC_ARG_ENABLE(lame, 
            [  --disable-lame  Do not use LAME],
            [ use_lame=no; ] )
              
AC_ARG_WITH(lame-dir, AC_HELP_STRING([--with-lame-dir=path],
            [include path of lame/lame.h]),
            [
	      	if test "x$withval" != "x"; then
	          LAME_H_DIR="$withval/"
		  CXXFLAGS="$CXXFLAGS -I$withval"
		fi
	    ],
	    [LAME_H_DIR=""])
AC_SUBST(LAME_H_DIR)

AC_ARG_ENABLE(twolame, 
            [  --disable-twolame  Do not use TwoLAME],
            [ use_twolame=no; ] )              


if test "x$transcoding" = "xyes"; then
  
  ENABLE_TRANSCODING="true"

  # check for LAME
	AH_TEMPLATE([HAVE_LAME], [])
  if test "x$use_lame" = "xyes"; then
    AC_CHECK_HEADERS([${LAME_H_DIR}lame/lame.h], have_lame=yes, have_lame=no)
    if test "x$have_lame" = "xyes"; then    
      LAME_LIBS="-lmp3lame"
      have_encoder=yes
			AC_DEFINE([HAVE_LAME], [1], [])
    fi
  fi
  
  # check for TwoLAME
	AH_TEMPLATE([HAVE_TWOLAME], [])
  if test "x$use_twolame" = "xyes"; then
    PKG_CHECK_MODULES(TWOLAME, twolame >= 0.3.8, have_twolame=yes, have_twolame=no)
    if test "x$have_twolame" = "xyes"; then
      have_encoder=yes
			AC_DEFINE([HAVE_TWOLAME], [1], [])
    fi
  fi
  
  
  #
  # if encoder was found check for further libs
  #
  have_decoder=no
  if test "x$have_encoder" = "xyes"; then

    # vorbis
	  AH_TEMPLATE([HAVE_VORBIS], [])
    PKG_CHECK_MODULES(VORBISFILE, vorbisfile >= 1.0, have_vorbis=yes, have_vorbis=no)    
    if test "x$have_vorbis" = "xyes"; then      
      have_decoder=yes    
			AC_DEFINE([HAVE_VORBIS], [1], [])
    fi
    
    # musepack
	  AH_TEMPLATE([HAVE_MUSEPACK], []) 
    AC_ARG_WITH(mpc-dir, AC_HELP_STRING([--with-mpc-dir=path],
            [include path of mpcdec/mpcdec.h]),
            [
                if test "x$withval" != "x"; then
                  MPC_H_DIR="$withval/"
                  CXXFLAGS="$CXXFLAGS -I$withval"
                fi
            ],
            [MPC_H_DIR=""])
    AC_SUBST(MPC_H_DIR)

    AC_CHECK_HEADERS(${MPC_H_DIR}mpcdec/config_types.h, have_mpc=yes, have_mpc=no)
    if test "x$have_mpc" = "xyes"; then      
      MUSEPACK_LIBS="-lmpcdec"
      have_decoder=yes
			AC_DEFINE([HAVE_MUSEPACK], [1], [])
		fi
    
    # FLAC
	  AH_TEMPLATE([HAVE_FLAC_FILEDECODER], [])
	  AH_TEMPLATE([HAVE_FLAC], [])
    AC_ARG_WITH(flac-dir, AC_HELP_STRING([--with-flac-dir=path],
            [include path of FLAC/file_decoder.h (flac <= 1.1.2) or FLAC/stream_decoder.h (flac >= 1.1.3)]),
            [
                if test "x$withval" != "x"; then
                  FLAC_H_DIR="$withval/"
                  CXXFLAGS="$CXXFLAGS -I$withval"
                fi
            ],
            [FLAC_H_DIR=""])
    AC_SUBST(FLAC_H_DIR)


    AC_CHECK_HEADERS(${FLAC_H_DIR}FLAC/file_decoder.h, have_flac=yes, have_flac=no)
    if test "x$have_flac" = "xyes"; then      
      FLAC_LIBS="-lFLAC"
      have_decoder=yes
	  AC_DEFINE([HAVE_FLAC], [1], [])
	  AC_DEFINE([HAVE_FLAC_FILEDECODER], [1], [])
    fi
	
    if test "x$have_flac" = "xno"; then      
	  AC_CHECK_HEADERS(${FLAC_H_DIR}FLAC/stream_decoder.h, have_flac=yes, have_flac=no)
      if test "x$have_flac" = "xyes"; then      
        FLAC_LIBS="-lFLAC"
        have_decoder=yes
	    AC_DEFINE([HAVE_FLAC], [1], [])
      fi
	fi
		
  fi # have_encoder

fi # transcoding = yes



# has to be if not else
if test "x$transcoding" = "xno"; then
  ENABLE_TRANSCODING="false"
  CXXFLAGS="$CXXFLAGS -DDISABLE_TRANSCODING"
  AC_MSG_NOTICE(Transcoding disabled");     
fi
AM_CONDITIONAL(DISABLE_TRANSCODING, test x$ENABLE_TRANSCODING = xfalse)


dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h fcntl.h netdb.h netinet/in.h string.h sys/ioctl.h sys/param.h sys/socket.h unistd.h sys/utsname.h syslog.h])

dnl Checks for typedefs, structures, and compiler characteristics.


dnl Checks for library functions.


dnl Checks for Additional stuffs.

# HTTP Port
AC_ARG_ENABLE(default-http-port,
 [  --enable-default-http-port[=PORT] Set the default HTTP port],
 [  CXXFLAGS="$CXXFLAGS -DDEFAULT_HTTP_PORT=$enableval" ])
# end HTTP Port

# inotify
#have_inotify=no
#use_inotify=yes
#AH_TEMPLATE([HAVE_INOTIFY], [inotify support])
#AC_ARG_ENABLE(inotify, 
#            [  --disable-inotify  Disable inotify support],
#            [ use_inotify=no; ] )
#
#if test "x$use_inotify" = "xyes"; then
#  AC_CHECK_HEADERS(sys/inotify.h, 
#      have_inotify=yes
#      AC_DEFINE([HAVE_INOTIFY], [1], []), 
#      have_inotify=no)
#fi
# end inotify



# GNOME panel applet incl. libnotify
use_gnome_applet=no
have_libpanelapplet=no
have_libnotify=no
AC_ARG_ENABLE(gnome-panel-applet, 
            [  --enable-gnome-panel-applet  build a panel applet for GNOME desktop],
            [ use_gnome_applet=yes; ] )
            
if test "x$use_gnome_applet" = "xyes"; then
  PKG_CHECK_MODULES(LIBPANELAPPLET, libpanelapplet-2.0, have_libpanelapplet=yes, have_libpanelapplet=no)
  PKG_CHECK_MODULES(LIBNOTIFY, libnotify >= 0.4.2, have_libnotify=yes, have_libnotify=no)
  if test "x$have_libnotify" = "xyes"; then
    LIBNOTIFY_CFLAGS="-DHAVE_LIBNOTIFY $LIBNOTIFY_CFLAGS"
  fi
fi
AM_CONDITIONAL(GNOMEAPPLET, test "x$have_libpanelapplet" = "xyes")

# end GNOME panel applet





AC_SUBST(LIBXML_LIBS)
AC_SUBST(LIBXML_CFLAGS)

AC_SUBST(PCRE_LIBS)
AC_SUBST(PCRE_CFLAGS)

AC_SUBST(SQLITE3_LIBS)
AC_SUBST(SQLITE3_CFLAGS)

AC_SUBST(LAME_LIBS)
AC_SUBST(MUSEPACK_LIBS)
AC_SUBST(FLAC_LIBS)
AC_SUBST(FUPPES_LIBS)
AC_SUBST(FUPPES_CFLAGS)
AC_SUBST(PTHREAD_LIBS)



AC_OUTPUT([
Makefile
src/Makefile
src/gnome/Makefile
])


dnl summary

echo ""
echo "  SUMMARY"
echo ""

#echo $host

if test "x$transcoding" = "xyes"; then

  # no encoder
  if test "x$have_encoder" = "xno"; then
    echo "transcoding disabled"
    echo ""
    echo "no encoding library was found"
    echo "If you want transcoding install LAME and/or TwoLAME"
    echo "and run ./configure again"
    echo ""
    
    transcoding=no    
  fi

  # no decoder
  if test "x$have_decoder" = "xno"; then 
    if test "x$have_encoder" = "xyes"; then 
      echo "transcoding disabled"
      echo ""
      echo "An encoding library was found"
      echo "but there is no decoding library."
      echo "Please install the OGG/Vorbis, Musepack and/or FLAC libraries"
      echo "and run ./configure again"
      echo ""
    fi
    
    transcoding=no
  fi
    
    
  if test "x$transcoding" = "xyes"; then
  
    echo "  audio transcoding enabled"  
    echo "    encoder:"
    if test "x$have_lame" = "xyes"; then
      echo "      lame   : yes"
    else
      echo "      lame   : no"
    fi
    
    if test "x$have_twolame" = "xyes"; then
      echo "      twolame: yes"
    else  
      echo "      twolame: no"
    fi
    
      
    echo "    decoder:"
    if test "x$have_vorbis" = "xyes"; then
      echo "      vorbis : yes"
    else
      echo "      vorbis : no"      
    fi
      
    if test "x$have_mpc" = "xyes"; then
      echo "      mpc    : yes"
    else
      echo "      mpc    : no"      
    fi     
    
    if test "x$have_flac" = "xyes"; then
      echo "      flac   : yes"
    else
      echo "      flac   : no"      
    fi 
  
  fi
  
else # transcoding = yes  
  echo "  audio transcoding disabled"  
fi

# iconv
echo ""
if test "x$have_iconv" = "xyes"; then
  echo "  iconv      : enabled"
else
  echo "  iconv      : disabled"
fi

# uuid
if test "x$have_uuid" = "xyes"; then
  echo "  uuid       : enabled"
else
  echo "  uuid       : disabled"
fi

# gamin
#if test "x$have_gamin" = "xyes"; then
#  echo "  gamin      : enabled"
#else
#  echo "  gamin      : disabled"
#fi

# inotify
#if test "x$have_inotify" = "xyes"; then
#  echo "  inotify    : enabled"
#else
#  echo "  inotify    : disabled"
#fi

# taglib
if test "x$have_taglib" = "xyes"; then
  echo "  taglib     : enabled"
else
  echo "  taglib     : disabled"
fi

# ImageMagick
if test "x$have_imagemagick" = "xyes"; then
  echo "  ImageMagick: enabled"
else
  echo "  ImageMagick: disabled"
fi

# libavformat
if test "x$have_libavformat" = "xyes"; then
  echo "  libavformat: enabled"
else
  echo "  libavformat: disabled"
fi

#
# GNOME
#

# have_libpanelapplet
echo ""
echo "GNOME"
if test "x$have_libpanelapplet" = "xyes"; then
  echo "  panel applet : enabled"
else
  echo "  panel applet : disabled"
fi

# libnotify
if test "x$have_libnotify" = "xyes"; then
  echo "  libnotify    : enabled"
else
  echo "  libnotify    : disabled"
fi


echo ""
echo "Thanks for using fuppes"
echo "please report bugs"
echo ""

