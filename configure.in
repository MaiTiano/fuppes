dnl Process this file with autoconf to produce a configure script.
dnl $Id: $

AC_INIT([fuppes], [SVN-578], [fuppes@ulrich-voelkel.de])
AM_CONFIG_HEADER(src/config.h)
AM_INIT_AUTOMAKE([1.10])
dnl AM_INIT_AUTOMAKE(fuppes, SVN-578, fuppes@ulrich-voelkel.de)


AC_PROG_CC
AC_PROG_CXX
AC_DISABLE_STATIC
#AC_DISABLE_SHARED
AC_PROG_LIBTOOL
AC_PROG_INSTALL
AM_PROG_INSTALL_STRIP


AC_FUNC_FSEEKO
AC_TYPE_OFF_T
AC_SYS_LARGEFILE
AC_C_BIGENDIAN

PKG_PROG_PKG_CONFIG

dnl Checks for programs.


FUPPES_CFLAGS=""
FUPPES_LIBS=""

F_CFLAGS=""
F_LDFLAGS=""

is_windows=false
build_daemon=true
case $host in 
  *-*-mingw32*)
		echo "building with MinGW"
    LDFLAGS="$LDFLAGS -lws2_32 -lole32 -no-undefined"
		build_daemon=false
		is_windows=true
	;;
	*)
	  build_daemon=true
	;;
esac
AM_CONDITIONAL([BUILD_DAEMON], [test x$build_daemon = xtrue])
AM_CONDITIONAL([WINDOWS_BUILD], [test x$is_windows = xtrue])


dnl Checks for libraries.
AM_ICONV
PKG_CHECK_MODULES(PCRE, libpcre >= 5.0)
PKG_CHECK_MODULES(LIBXML, libxml-2.0 >= 2.6.1)
PKG_CHECK_MODULES(SQLITE3, sqlite3 >= 3.2)
AC_CHECK_LIB(pthread, pthread_create, F_LDFLAGS="$F_LDFLAGS -lpthread")

# uuid
have_uuid=no
AH_TEMPLATE([HAVE_UUID], [])
PKG_CHECK_MODULES(UUID, uuid >= 0, have_uuid=yes, have_uuid=no)
if test "x$have_uuid" = "xyes"; then
  AC_DEFINE([HAVE_UUID], [1], [])
	F_CFLAGS="$F_CFLAGS $UUID_CFLAGS"
  F_LDFLAGS="$F_LDFLAGS $UUID_LIBS"
fi

# gamin
#have_gamin=no
#AH_TEMPLATE([HAVE_GAMIN], [])
#PKG_CHECK_MODULES(GAMIN, gamin, have_gamin=yes, have_gamin=no)
#if test "x$have_gamin" = "xyes"; then
#  FUPPES_CFLAGS="$FUPPES_CFLAGS $GAMIN_CFLAGS"
#  FUPPES_LIBS="$FUPPES_LIBS $GAMIN_LIBS"
#  AC_DEFINE([HAVE_GAMIN], [1], [])
#fi


# TAGLIB
use_taglib=yes
AC_ARG_ENABLE(taglib, 
            [  --disable-taglib  Do not use taglib],
            [ use_taglib=no; ] )
						
have_taglib=no

AH_TEMPLATE([HAVE_TAGLIB], [])

TAGLIB_CFLAGS=""
TAGLIB_LIBS=""

if test "x$use_taglib" = "xyes"; then

if test -z "$TAGLIB_CONFIG"; then
  AC_PATH_PROG(TAGLIB_CONFIG, taglib-config, no)
fi

if test "$TAGLIB_CONFIG" = "no" ; then   
   AC_MSG_NOTICE([*** taglib support disabled ***]);
   #echo "  the taglib-config script could not be found."
   #echo "  taglib support disabled"   
else  
	AC_DEFINE([HAVE_TAGLIB], [1], [])

  AC_MSG_CHECKING(TAGLIB_CFLAGS)
  TAGLIB_CFLAGS=`$TAGLIB_CONFIG --cflags`
	#FUPPES_CFLAGS="$FUPPES_CFLAGS $TAGLIB_CFLAGS"
  AC_MSG_RESULT($TAGLIB_CFLAGS)
	
	AC_MSG_CHECKING(TAGLIB_LIBS)
	TAGLIB_LIBS=`$TAGLIB_CONFIG --libs`
  #FUPPES_LIBS="$FUPPES_LIBS $TAGLIB_LIBS"
  AC_MSG_RESULT($TAGLIB_LIBS)
	
  have_taglib=yes
fi
fi

AM_CONDITIONAL(TAGLIB_METADATA, test "x$have_taglib" = "xyes")
AC_SUBST(TAGLIB_CFLAGS)
AC_SUBST(TAGLIB_LIBS)

# END TAGLIB

#
# ImageMagick (Magick++)
#
use_imagemagick=yes
AC_ARG_ENABLE(imagemagick, 
            [  --disable-imagemagick  Do not use ImageMagick (MagickWand and Magick++)],
            [ use_imagemagick=no; ] )

have_magickpp=no
have_magickwand=no

AH_TEMPLATE([HAVE_IMAGEMAGICK_PP], [])
AH_TEMPLATE([HAVE_IMAGEMAGICK_WAND], [])

if test "x$use_imagemagick" = "xyes"; then

  IMAGEMAGICK_PP_CFLAGS=""
  IMAGEMAGICK_PP_LIBS=""
  PKG_CHECK_MODULES(IMAGEMAGICK_PP, ImageMagick++ >= 6.2.4, have_magickpp=yes, have_magickpp=no)

  if test "x$have_magickpp" = "xyes"; then
		AC_DEFINE([HAVE_IMAGEMAGICK_PP], [1], [])
    FUPPES_CFLAGS="$FUPPES_CFLAGS $IMAGEMAGICK_PP_CFLAGS"
		FUPPES_LIBS="$FUPPES_LIBS $IMAGEMAGICK_PP_LIBS"
  #else
  #  AC_MSG_NOTICE([*** ImageMagick (Magick++) support disabled ***]);
  fi

	IMAGEMAGICK_WAND_CFLAGS=""
  IMAGEMAGICK_WAND_LIBS=""
  PKG_CHECK_MODULES(IMAGEMAGICK_WAND, Wand >= 6.2.4, have_magickwand=yes, have_magickwand=no)

fi
AM_CONDITIONAL(MAGICK_WAND_METADATA, test "x$have_magickwand" = "xyes")
#end ImageMagick


#
# libavformat
#
AH_TEMPLATE([HAVE_LIBAVFORMAT], [])
AH_TEMPLATE([HAVE_AVSTRING_H], [])
AH_TEMPLATE([HAVE_LIBSWSCALE], [])
AH_TEMPLATE([HAVE_AV_PARSE_VIDEO_FUNCTS], [])
AH_TEMPLATE([FFMPEG_VERSION], [])
use_libavformat=yes
have_avstring_h=no
AC_ARG_ENABLE(libavformat, 
            [  --disable-libavformat  Do not use libavformat (from the FFmpeg package)],
            [ use_libavformat=no; ] )

have_libavformat=no
have_libavformat52=no
have_libavformat51=no
have_libavformat50=no

have_libswscale=no
if test "x$use_libavformat" = "xyes"; then
  LIBAVFORMAT_CFLAGS=""
  LIBAVFORMAT_LIBS=""

  PKG_CHECK_MODULES(LIBAVFORMAT, libavformat >= 52, [have_libavformat52=yes have_libavformat=yes], have_libavformat52=no)
  
	if test "x$have_libavformat52" = "xno"; then
		PKG_CHECK_MODULES(LIBAVFORMAT, libavformat >= 51, [have_libavformat51=yes have_libavformat=yes], have_libavformat51=no)
  
		if test "x$have_libavformat51" = "xno"; then
			PKG_CHECK_MODULES(LIBAVFORMAT, libavformat, [have_libavformat50=yes have_libavformat=yes], have_libavformat50=no)
		fi
	fi

  if test "x$have_libavformat" = "xyes"; then
		
		AC_DEFINE([HAVE_LIBAVFORMAT], [1], [])
		PKG_CHECK_MODULES(LIBSWSCALE, libswscale, have_libswscale=yes, have_libswscale=no)
		if test "x$have_libswscale" = "xyes"; then
      AC_DEFINE([HAVE_LIBSWSCALE], [1], [])
    fi
		
    AC_CHECK_HEADERS(ffmpeg/avstring.h, have_avstring_h=yes, have_avstring_h=no)
    if test "x$have_avstring_h" = "xyes"; then
      AC_DEFINE([HAVE_AVSTRING_H], [1], [])
    fi

		if test "x$have_libavformat52" = "xyes"; then
			AC_DEFINE([FFMPEG_VERSION], [52], [])
			AC_DEFINE([HAVE_AV_PARSE_VIDEO_FUNCTS], [1], [])
		elif test "x$have_libavformat51" = "xyes"; then
			AC_DEFINE([FFMPEG_VERSION], [51], [])
			#AC_DEFINE([HAVE_AV_PARSE_VIDEO_FUNCTS], [1], [])
		elif test "x$have_libavformat50" = "xyes"; then
			AC_DEFINE([FFMPEG_VERSION], [50], [])
		fi

  else
    AC_MSG_NOTICE([*** libavformat (FFmpeg) support disabled ***]);
  fi 
fi
AM_CONDITIONAL(LIBAVFORMAT_METADATA, test "x$have_libavformat" = "xyes")
# end libavformat


video_transcoding=no
AC_ARG_ENABLE(video-transcoding, 
            [  --enable-video-transcoding  enable video transcoding using libavformat],
            [ video_transcoding=yes; ] )

AH_TEMPLATE([ENABLE_VIDEO_TRANSCODING], [])
if test "x$have_libavformat" = "xno"; then
  video_transcoding=no
else
  if test "x$video_transcoding" = "xyes"; then
    AC_DEFINE([ENABLE_VIDEO_TRANSCODING], [1], [])
  fi
fi
AM_CONDITIONAL([VIDEO_TRANSCODING], [test "x$video_transcoding" = "xyes"])



AH_TEMPLATE([HAVE_MPEG4IP], [])
have_mpeg4ip=no
if test -z "$MPEG4IP_CONFIG"; then
  AC_PATH_PROG(MPEG4IP_CONFIG, mpeg4ip-config, no)
fi

if test "$MPEG4IP_CONFIG" = "no" ; then   
   AC_MSG_NOTICE([*** mpeg4ip support disabled ***]);
else  
	AC_DEFINE([HAVE_MPEG4IP], [1], [])

  AC_MSG_CHECKING(MPEG4IP_CFLAGS)
  MPEG4IP_CFLAGS=`$MPEG4IP_CONFIG --cflags`
	FUPPES_CFLAGS="$FUPPES_CFLAGS $MPEG4IP_CFLAGS"
	FUPPES_LIBS="$FUPPES_LIBS -lmp4v2"
  AC_MSG_RESULT($MPEG4IP_CFLAGS)
  
  have_mpeg4ip=yes
fi


LAME_LIBS=""
TWOLAME_LIBS=""

MUSEPACK_LIBS=""
FLAC_LIBS=""
transcoding=yes

use_tremor=no

have_lame=no
have_twolame=no

have_decoder=no
have_vorbis=no
have_tremor=no
have_mpc=no
have_flac=no
have_faad=no
have_mp4ff=no
have_mad=no

# transcoding
AC_ARG_ENABLE(transcoding,
            [  --disable-transcoding  Disable on the fly transcoding support],
            [ if test "x$enable_transcoding" = "xno" ; then
                    transcoding=no;
              fi ] )
              
AC_ARG_WITH(lame-dir, AC_HELP_STRING([--with-lame-dir=path],
            [include path of lame/lame.h]),
            [
	      	if test "x$withval" != "x"; then
	          LAME_H_DIR="$withval/"
		  CXXFLAGS="$CXXFLAGS -I$withval"
		fi
	    ],
	    [LAME_H_DIR=""])
AC_SUBST(LAME_H_DIR)

AC_ARG_ENABLE(tremor,
						[  --enable-tremor  Use Tremor (integer-only vorbis decoder) instead of libvorbis],
						[ use_tremor=yes; ] )


if test "x$transcoding" = "xyes"; then
  
  ENABLE_TRANSCODING="true"

  # check for LAME
	AH_TEMPLATE([HAVE_LAME], [])
  AC_CHECK_HEADERS([${LAME_H_DIR}lame/lame.h], have_lame=yes, have_lame=no)
  if test "x$have_lame" = "xyes"; then    
    LAME_LIBS="-lmp3lame"
		AC_DEFINE([HAVE_LAME], [1], [])  
  fi
  
  # check for TwoLAME
	AH_TEMPLATE([HAVE_TWOLAME], [])
  PKG_CHECK_MODULES(TWOLAME, twolame >= 0.3.8, have_twolame=yes, have_twolame=no)
  if test "x$have_twolame" = "xyes"; then
		AC_DEFINE([HAVE_TWOLAME], [1], [])
  fi

  #
  # if encoder was found check for further libs
  #
  have_decoder=no
    
    # tremor
    TREMOR_H_DIR=""
    AH_TEMPLATE([HAVE_TREMOR], [])
    AH_TEMPLATE([HAVE_VORBIS], [])
    if test "x$use_tremor" = "xyes"; then
      AC_CHECK_HEADERS(${TREMOR_H_DIR}tremor/ivorbisfile.h, have_tremor=yes, have_tremor=no)
      if test "x$have_tremor" = "xyes"; then  
        FUPPES_LIBS="$FUPPES_LIBS "
        AC_DEFINE([HAVE_VORBIS], [1], [])
        AC_DEFINE([HAVE_TREMOR], [1], [])
			else
				echo "Tremor not found. Checking for libvorbisfile instead."
			fi
    fi

    # vorbis
	  #AH_TEMPLATE([HAVE_VORBIS], [])
    if test "x$have_tremor" = "xno"; then
      PKG_CHECK_MODULES(VORBISFILE, vorbisfile >= 1.0, have_vorbis=yes, have_vorbis=no)    
      if test "x$have_vorbis" = "xyes"; then      
        have_decoder=yes    
        AC_DEFINE([HAVE_VORBIS], [1], [])
      fi
    fi

    
    # musepack
	  AH_TEMPLATE([HAVE_MUSEPACK], []) 
    AC_ARG_WITH(mpc-dir, AC_HELP_STRING([--with-mpc-dir=path],
            [include path of mpcdec/mpcdec.h]),
            [
                if test "x$withval" != "x"; then
                  MPC_H_DIR="$withval/"
                  CXXFLAGS="$CXXFLAGS -I$withval"
                fi
            ],
            [MPC_H_DIR=""])
    AC_SUBST(MPC_H_DIR)

    AC_CHECK_HEADERS(${MPC_H_DIR}mpcdec/config_types.h, have_mpc=yes, have_mpc=no)
    if test "x$have_mpc" = "xyes"; then      
      MUSEPACK_LIBS="-lmpcdec"
      have_decoder=yes
			AC_DEFINE([HAVE_MUSEPACK], [1], [])
		fi
    
    # FLAC
	  AH_TEMPLATE([HAVE_FLAC_FILEDECODER], [])
	  AH_TEMPLATE([HAVE_FLAC], [])
    AC_ARG_WITH(flac-dir, AC_HELP_STRING([--with-flac-dir=path],
            [include path of FLAC/file_decoder.h (flac <= 1.1.2) or FLAC/stream_decoder.h (flac >= 1.1.3)]),
            [
                if test "x$withval" != "x"; then
                  FLAC_H_DIR="$withval/"
                  CXXFLAGS="$CXXFLAGS -I$withval"
                fi
            ],
            [FLAC_H_DIR=""])
    AC_SUBST(FLAC_H_DIR)


    AC_CHECK_HEADERS(${FLAC_H_DIR}FLAC/file_decoder.h, have_flac=yes, have_flac=no)
    if test "x$have_flac" = "xyes"; then      
      FLAC_LIBS="-lFLAC"
      have_decoder=yes
	  AC_DEFINE([HAVE_FLAC], [1], [])
	  AC_DEFINE([HAVE_FLAC_FILEDECODER], [1], [])
    fi
	
    if test "x$have_flac" = "xno"; then      
	  AC_CHECK_HEADERS(${FLAC_H_DIR}FLAC/stream_decoder.h, have_flac=yes, have_flac=no)
      if test "x$have_flac" = "xyes"; then      
        FLAC_LIBS="-lFLAC"
        have_decoder=yes
	    AC_DEFINE([HAVE_FLAC], [1], [])
      fi
	  fi

    # faad
	AH_TEMPLATE([HAVE_FAAD], [])
    AH_TEMPLATE([HAVE_MP4FF_H], [])
    AC_ARG_WITH(faad-dir, AC_HELP_STRING([--with-faad-dir=path],
            [include path of faad.h]),
            [if test "x$withval" != "x"; then
               FAAD_H_DIR="$withval/"
               CXXFLAGS="$CXXFLAGS -I$withval"
             fi], [FAAD_H_DIR=""])
    AC_SUBST(FAAD_H_DIR)

    AC_CHECK_HEADERS(${FAAD_H_DIR}faad.h, have_faad=yes, have_faad=no)
    if test "x$have_faad" = "xyes"; then    
      AC_RUN_IFELSE(
        [AC_LANG_PROGRAM(
          [[#include <faad.h>]],
          [[(void) faacDecOpen]])],
        [have_decoder=yes
         AC_DEFINE([HAVE_FAAD], [1], [])],
        [have_faad=no])

      AC_CHECK_HEADERS(${FAAD_H_DIR}mp4ff.h, have_mp4ff=yes, have_mp4ff=no)
      if test "x$have_mp4ff" = "xyes"; then
        AC_DEFINE([HAVE_MP4FF_H], [1], [])
      else
        echo "mp4ff.h not found. AAC decoder is build without MP4 support"
      fi
    fi
		
    # libmad
	  AH_TEMPLATE([HAVE_MAD], [])
    PKG_CHECK_MODULES(MAD, mad >= 0.15, have_mad=yes, have_mad=no)    
    if test "x$have_mad" = "xyes"; then      
      have_decoder=yes
      AC_DEFINE([HAVE_MAD], [1], [])
    fi    

fi # transcoding = yes




if test "x$transcoding" = "xno"; then
  ENABLE_TRANSCODING="false"
  CXXFLAGS="$CXXFLAGS -DDISABLE_TRANSCODING"
  AC_MSG_NOTICE(Transcoding disabled");     
fi
AM_CONDITIONAL(DISABLE_TRANSCODING, test x$ENABLE_TRANSCODING = xfalse)


#dlna_support=no
#AC_ARG_ENABLE(dlna-support, 
#            [  --enable-dlna-support  enable DLNA support],
#            [ dlna_support=yes; ] )

#AH_TEMPLATE([DLNA_SUPPORT], [])
#if test "x$dlna_support" = "xyes"; then
#  AC_DEFINE([DLNA_SUPPORT], [1], [])
#fi
#AM_CONDITIONAL([DLNA_SUPPORT], [test "x$dlna_support" = "xyes"])


AH_TEMPLATE([HAVE_SIMAGE], [])
SIMAGE_CFLAGS=""
SIMAGE_LIBS=""
have_simage=no
if test -z "$SIMAGE_CONFIG"; then
  AC_PATH_PROG(SIMAGE_CONFIG, simage-config, no)
fi

if test "$SIMAGE_CONFIG" = "no" ; then   
   AC_MSG_NOTICE([*** simage support disabled ***]);
else  
	AC_DEFINE([HAVE_SIMAGE], [1], [])

  AC_MSG_CHECKING(SIMAGE_CFLAGS)
  SIMAGE_CFLAGS=`$SIMAGE_CONFIG --cflags`
	FUPPES_CFLAGS="$FUPPES_CFLAGS $SIMAGE_CFLAGS"
  AC_MSG_RESULT($SIMAGE_CFLAGS)
  
	AC_MSG_CHECKING(SIMAGE_LIBS)
	SIMAGE_LIBS=`$SIMAGE_CONFIG --libs`
  FUPPES_LIBS="$FUPPES_LIBS $SIMAGE_LIBS"
  AC_MSG_RESULT($SIMAGE_LIBS)
  
  have_simage=yes
fi
AM_CONDITIONAL(SIMAGE_METADATA, test "x$have_simage" = "xyes")
AC_SUBST(SIMAGE_CFLAGS)
AC_SUBST(SIMAGE_LIBS)


dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h fcntl.h netdb.h netinet/in.h string.h sys/ioctl.h sys/param.h sys/socket.h unistd.h sys/utsname.h syslog.h])

dnl Checks for typedefs, structures, and compiler characteristics.

AC_CHECK_SIZEOF(off_t)
AC_CHECK_SIZEOF(long long int)
AC_CHECK_SIZEOF(unsigned long long int)
AC_CHECK_SIZEOF(long int)
AC_CHECK_SIZEOF(unsigned long int)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(unsigned int)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(unsigned short)

dnl Checks for library functions.


dnl Checks for Additional stuffs.

# HTTP Port
AC_ARG_ENABLE(default-http-port,
 [  --enable-default-http-port[=PORT] Set the default HTTP port],
 [  CXXFLAGS="$CXXFLAGS -DDEFAULT_HTTP_PORT=$enableval" ])
# end HTTP Port

# inotify
have_inotify=no
AH_TEMPLATE([HAVE_INOTIFY], [inotify support])
AC_CHECK_HEADERS(sys/inotify.h, 
     have_inotify=yes
     AC_DEFINE([HAVE_INOTIFY], [1], []), 
     have_inotify=no)
AM_CONDITIONAL([HAVE_INOTIFY], [test "x$have_inotify" = "xyes"])
# end inotify



# GNOME panel applet
use_gnome_applet=no
have_libpanelapplet=no
AC_ARG_ENABLE(gnome-panel-applet, 
            [  --enable-gnome-panel-applet  build a panel applet for GNOME desktop],
            [ use_gnome_applet=yes; ] )
            
if test "x$use_gnome_applet" = "xyes"; then
  PKG_CHECK_MODULES(LIBPANELAPPLET, libpanelapplet-2.0, have_libpanelapplet=yes, have_libpanelapplet=no)
fi
AM_CONDITIONAL(GNOMEAPPLET, test "x$have_libpanelapplet" = "xyes")

# end GNOME panel applet

# libnotify
use_libnotify=$have_libpanelapplet
have_libnotify=no

AH_TEMPLATE([HAVE_LIBNOTIFY], [])
AC_ARG_ENABLE(libnotify, 
            [  --enable-libnotify  libnotify support],
            [ use_libnotify=yes; ] )

if test "x$use_libnotify" = "xyes"; then
  PKG_CHECK_MODULES(LIBNOTIFY, libnotify >= 0.4.2, have_libnotify=yes, have_libnotify=no)
  if test "x$have_libnotify" = "xyes"; then
    AC_DEFINE([HAVE_LIBNOTIFY], [1], [])
	  CXXFLAGS="$CXXFLAGS $LIBNOTIFY_CFLAGS"
	  LDFLAGS="$LDFLAGS $LIBNOTIFY_LIBS"
  fi
fi
AM_CONDITIONAL(LIBNOTIFY, test "x$have_libnotify" = "xyes")


FUPPES_CFLAGS="$F_CFLAGS $FUPPES_CFLAGS"
FUPPES_LIBS="$F_LDFLAGS $FUPPES_LIBS"


AC_SUBST(LIBXML_LIBS)
AC_SUBST(LIBXML_CFLAGS)

AC_SUBST(PCRE_LIBS)
AC_SUBST(PCRE_CFLAGS)

AC_SUBST(SQLITE3_LIBS)
AC_SUBST(SQLITE3_CFLAGS)

AC_SUBST(LAME_LIBS)
AC_SUBST(MUSEPACK_LIBS)
AC_SUBST(FLAC_LIBS)


FUPPES_CFLAGS="$FUPPES_CFLAGS $MAD_CFLAGS"
FUPPES_LIBS="$FUPPES_LIBS $MAD_LIBS"

AC_SUBST(FUPPES_LIBS)
AC_SUBST(FUPPES_CFLAGS)

# AC_SUBST(LDFLAGS)

AC_OUTPUT([
Makefile
src/Makefile
src/plugins/Makefile
src/gnome/Makefile
src/windows/Makefile
])


dnl summary

echo ""
echo "  SUMMARY"
echo ""

#echo $host

if test "x$transcoding" = "xyes"; then
  
  # no decoder
  if test "x$have_decoder" = "xno"; then 
    if test "x$have_encoder" = "xyes"; then 
      echo "transcoding disabled"
      echo ""
      echo "An encoding library was found"
      echo "but there is no decoding library."
      echo "Please install the OGG/Vorbis, Musepack and/or FLAC libraries"
      echo "and run ./configure again"
      echo ""
    fi
    
    transcoding=no
  fi
fi
    
if test "x$transcoding" = "xyes"; then
  
    echo "  audio transcoding enabled"  
    echo "    encoder:"
    if test "x$have_lame" = "xyes"; then
      echo "      lame       : yes"
    else
      echo "      lame       : no"
    fi
    
    if test "x$have_twolame" = "xyes"; then
      echo "      twolame    : yes"
    else  
      echo "      twolame    : no"
    fi
    
    echo "      wav        : yes"
    echo "      pcm        : yes"
      
    echo "    decoder:"
    if test "x$have_vorbis" = "xyes"; then
      echo "      vorbis     : yes (libvorbisfile)"
		else
      if test "x$have_tremor" = "xyes"; then
        echo "      vorbis     : yes (tremor)"
      else
        echo "      vorbis     : no"      
      fi
    fi

    if test "x$have_mpc" = "xyes"; then
      echo "      mpc        : yes"
    else
      echo "      mpc        : no"      
    fi     
    
    if test "x$have_flac" = "xyes"; then
      echo "      flac       : yes"
    else
      echo "      flac       : no"      
    fi 

    if test "x$have_faad" = "xyes"; then
      if test "x$have_mp4ff" = "xyes"; then
        echo "      faad       : yes (aac/mp4/m4a)"
      else
        echo "      faad       : yes (aac/NO mp4/m4a)"
      fi
    else
      echo "      faad       : no (aac/mp4/m4a)"
    fi 

		if test "x$have_mad" = "xyes"; then
      echo "      mad        : yes (mpeg Layer I, II & III)"
    else
      echo "      mad        : no (mpeg Layer I, II & III)"      
    fi 
  
else # transcoding = yes  
  echo "  audio transcoding disabled"  
fi

echo ""
#end audio transcoding

echo "  video transcoding plugins"
if test "x$video_transcoding" = "xyes"; then
  echo "    ffmpeg     : enabled"
else
  echo "    ffmpeg     : disabled"
fi
echo ""


echo "  image conversion/rescaling"
if test "x$have_magickpp" = "xyes"; then
  echo "    ImageMagick: enabled  (Magick++)"
else
  echo "    ImageMagick: disabled (Magick++)"
fi
echo ""
#end image conversion/rescaling


echo "  metadata extraction"
# mpeg4ip
if test "x$have_mpeg4ip" = "xyes"; then
  echo "    mpeg4ip    : enabled  (mp4/ma4 metadata extraction)"
else
  echo "    mpeg4ip    : disabled (mp4/ma4 metadata extraction)"
fi
echo ""

echo "  metadata extraction plugins"
# taglib
if test "x$have_taglib" = "xyes"; then
  echo "    taglib     : enabled  (mp3, ogg, flac & mpc metadata extraction)"
else
  echo "    taglib     : disabled (mp3, ogg, flac & mpc metadata extraction)"
fi

# ImageMagick
if test "x$have_magickwand" = "xyes"; then
  echo "    ImageMagick: enabled  (Wand)"
else
  echo "    ImageMagick: disabled (Wand)"
fi

# simage
if test "x$have_simage" = "xyes"; then
  echo "    simage     : enabled  (jpeg, png, gif, tiff, rgb, pic, tga, eps)"
else
  echo "    simage     : disabled (jpeg, png, gif, tiff, rgb, pic, tga, eps)"
fi

# libavformat
if test "x$have_libavformat" = "xyes"; then
  echo "    libavformat: enabled"
else
  echo "    libavformat: disabled"
fi

echo ""
#end metadata


echo "  miscellaneous"

# iconv
if test "x$am_cv_func_iconv" = "xyes"; then
  echo "    iconv      : enabled (charset conversion)"
else
  echo "    iconv      : disabled (charset conversion)"
fi

# uuid
if test x$is_windows = xfalse; then
if test "x$have_uuid" = "xyes"; then
  echo "    uuid       : enabled"
else
  echo "    uuid       : disabled"
fi
fi

# gamin
#if test "x$have_gamin" = "xyes"; then
#  echo "  gamin      : enabled"
#else
#  echo "  gamin      : disabled"
#fi

# inotify
#if test "x$have_inotify" = "xyes"; then
#  echo "  inotify    : enabled"
#else
#  echo "  inotify    : disabled"
#fi


#
# GNOME
#

# have_libpanelapplet
echo ""
echo "  GNOME"
if test "x$have_libpanelapplet" = "xyes"; then
  echo "    panel applet : enabled"
else
  echo "    panel applet : disabled"
fi

# libnotify
if test "x$have_libnotify" = "xyes"; then
  echo "    libnotify    : enabled"
else
  echo "    libnotify    : disabled"
fi


echo ""
echo "Thanks for using fuppes"
echo "please report bugs"
echo ""

