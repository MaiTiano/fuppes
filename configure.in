dnl Process this file with autoconf to produce a configure script.
dnl $Id: $

AC_INIT(configure.in)


#release versioning
GENERIC_MAJOR_VERSION=0
GENERIC_MINOR_VERSION=7a
#GENERIC_MICRO_VERSION=4
#GENERIC_VERSION=$GENERIC_MAJOR_VERSION.$GENERIC_MINOR_VERSION.$GENERIC_MICRO_VERSION
GENERIC_VERSION=$GENERIC_MAJOR_VERSION.$GENERIC_MINOR_VERSION
AC_SUBST(GENERIC_MAJOR_VERSION)
AC_SUBST(GENERIC_MINOR_VERSION)
#AC_SUBST(GENERIC_MICRO_VERSION)
AC_SUBST(GENERIC_VERSION)

VERSION=$GENERIC_VERSION

#AC_INIT(fuppes, $GENERIC_VERSION, u-voelkel@users.sourceforge.net)
AM_INIT_AUTOMAKE(fuppes, $GENERIC_VERSION, u-voelkel@users.sourceforge.net)
AM_CONFIG_HEADER(config.h)

AC_PROG_CXX
AC_PROG_CC
#AC_PROG_MAKE_SET

AC_LANG([C])
AC_LANG([C++])

dnl Checks for programs.


AC_DEFUN(PKG_CHECK_MODULES, [
  succeeded=no

  if test -z "$PKG_CONFIG"; then
    AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
  fi

  if test "$PKG_CONFIG" = "no" ; then
     echo "*** The pkg-config script could not be found. Make sure it is"
     echo "*** in your path, or set the PKG_CONFIG environment variable"
     echo "*** to the full path to pkg-config."
     echo "*** Or see http://www.freedesktop.org/software/pkgconfig to get pkg-config."
  else
     PKG_CONFIG_MIN_VERSION=0.9.0
     if $PKG_CONFIG --atleast-pkgconfig-version $PKG_CONFIG_MIN_VERSION; then
        AC_MSG_CHECKING(for $2)

        if $PKG_CONFIG --exists "$2" ; then
            AC_MSG_RESULT(yes)
            succeeded=yes

            AC_MSG_CHECKING($1_CFLAGS)
            $1_CFLAGS=`$PKG_CONFIG --cflags "$2"`
            AC_MSG_RESULT($$1_CFLAGS)

            AC_MSG_CHECKING($1_LIBS)
            $1_LIBS=`$PKG_CONFIG --libs "$2"`
            AC_MSG_RESULT($$1_LIBS)
        else
            $1_CFLAGS=""
            $1_LIBS=""
            AC_MSG_RESULT([no])
        fi

        AC_SUBST($1_CFLAGS)
        AC_SUBST($1_LIBS)
     else
        echo "*** Your version of pkg-config is too old. You need version $PKG_CONFIG_MIN_VERSION or newer."
        echo "*** See http://www.freedesktop.org/software/pkgconfig";
     fi
  fi

  if test $succeeded = yes; then
     ifelse([$3], , :, [$3])
  else
     ifelse([$4], , AC_MSG_ERROR([Library requirements ($2) not met; consider 
adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a 
nonstandard prefix so pkg-config can find them.]), [$4])
  fi
])


#CXXFLAGS="-DUSE_SYSLOG $CXXFLAGS"
CXXFLAGS="-O0 -g"
#CXXFLAGS="-O3"

FUPPES_LIBS="-ldl $FUPPES_LIBS"
AC_SUBST(FUPPES_LIBS)

dnl Checks for libraries.
PKG_CHECK_MODULES(PCRE, libpcre >= 5.0)
PKG_CHECK_MODULES(LIBXML, libxml-2.0 >= 2.6.1)
PKG_CHECK_MODULES(SQLITE3, sqlite3 >= 3.3)
PTHREAD_LIBS=""
AC_CHECK_LIB(pthread, pthread_create, PTHREAD_LIBS="-lpthread")
UUID_LIBS=""
AC_CHECK_LIB(uuid, uuid_generate, UUID_LIBS="-luuid")

AC_SUBST(PTHREAD_LIBS)
AC_SUBST(UUID_LIBS)



# TAGLIB
TAGLIB_LIBS=""
TAGLIB_CFLAGS=""

if test -z "$TAGLIB_CONFIG"; then
  AC_PATH_PROG(TAGLIB_CONFIG, taglib-config, no)
fi

if test "$TAGLIB_CONFIG" = "no" ; then   
   AC_MSG_NOTICE([*** taglib support disabled ***]);
   echo "  the taglib-config script could not be found."
   echo "  taglib support disabled"
   echo ""
else  
  AC_MSG_CHECKING(TAGLIB_CFLAGS)
  TAGLIB_CFLAGS=`$TAGLIB_CONFIG --cflags`
  TAGLIB_CFLAGS="$TAGLIB_CFLAGS -DHAVE_TAGLIB"
  AC_MSG_RESULT($TAGLIB_CFLAGS)
  AC_SUBST(TAGLIB_CFLAGS)
  AC_MSG_CHECKING(TAGLIB_LIBS)  
  TAGLIB_LIBS=`$TAGLIB_CONFIG --libs`
  AC_MSG_RESULT($TAGLIB_LIBS)
  AC_SUBST(TAGLIB_LIBS)
fi

# END TAGLIB

LAME_LIBS=""
MUSEPACK_LIBS=""
FLAC_LIBS=""
transcoding=yes
have_lame=no
have_decoder=no
have_vorbis=no
have_mpc=no
have_flac=no

AC_ARG_ENABLE(transcoding,
            [  --disable-transcoding  Disable on the fly transcoding support],
            [ if test "x$enable_transcoding" = "xno" ; then
                    transcoding=no;
              fi ] )

if test "x$transcoding" = "xyes"; then
  
  ENABLE_TRANSCODING="true"
  
  #
  # check for lame
  #  
  AC_CHECK_HEADERS(lame/lame.h, have_lame=yes, have_lame=no)
  if test "x$have_lame" = "xyes"; then    
    LAME_LIBS="-lmp3lame"
  else
    transcoding=no
  fi   
  
  #
  # if lame is found check for further libs
  #
  have_decoder=no
  if test "x$have_lame" = "xyes"; then

    # vorbis
    PKG_CHECK_MODULES(VORBISFILE, vorbisfile >= 1.0, have_vorbis=yes, have_vorbis=no)    
    if test "x$have_vorbis" = "xyes"; then      
      have_decoder=yes    
    else
      CXXFLAGS="-DDISABLE_VORBIS $CXXFLAGS"
    fi
    
    # musepack    
    AC_CHECK_HEADERS(mpcdec/config_types.h, have_mpc=yes, have_mpc=no)
    if test "x$have_mpc" = "xyes"; then      
      MUSEPACK_LIBS="-lmpcdec"
      have_decoder=yes
    else
      CXXFLAGS="-DDISABLE_MUSEPACK $CXXFLAGS"
    fi
    
    # FLAC_LIBS
    AC_CHECK_HEADERS(FLAC/file_decoder.h, have_flac=yes, have_flac=no)
    if test "x$have_flac" = "xyes"; then      
      FLAC_LIBS="-lFLAC"
      have_decoder=yes
    else
      CXXFLAGS="-DDISABLE_FLAC $CXXFLAGS"
    fi    

  fi # have lame

fi # transcoding = yes

AC_SUBST(LAME_LIBS)
AC_SUBST(MUSEPACK_LIBS)
AC_SUBST(FLAC_LIBS)

# has to be if not else
if test "x$transcoding" = "xno"; then
  
  ENABLE_TRANSCODING="false"
  CXXFLAGS="-DDISABLE_TRANSCODING $CXXFLAGS"  
  AC_MSG_NOTICE(Transcoding disabled");     
fi
AM_CONDITIONAL(DISABLE_TRANSCODING, test x$ENABLE_TRANSCODING = xfalse)


dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h fcntl.h netdb.h netinet/in.h string.h sys/ioctl.h sys/param.h sys/socket.h unistd.h sys/utsname.h uuid/uuid.h syslog.h])

dnl Checks for typedefs, structures, and compiler characteristics.


dnl Checks for library functions.


dnl Checks for Additional stuffs.

AC_OUTPUT([
Makefile
src/Makefile
])
#include/Makefile



dnl summary

if test "x$have_lame" = "xyes"; then

  if test "x$have_decoder" = "xno"; then
    echo ""
    echo "Transcoding disabled"
    echo "The encoding library LAME was found"
    echo "but there is no decoding library."
    echo "Please install the OGG/Vorbis and/or Musepack libraries"
    echo "and run ./configure again"
    echo ""
  else
    echo ""
    echo "  Transcoding enabled"
    echo "    lame  : yes"
    
    if test "x$have_vorbis" = "xyes"; then
      echo "    vorbis: yes"
    else
      echo "    vorbis: no"      
    fi
    
    if test "x$have_mpc" = "xyes"; then
      echo "    mpc   : yes"
    else
      echo "    mpc   : no"      
    fi     
  
    if test "x$have_flac" = "xyes"; then
      echo "    flac  : yes"
    else
      echo "    flac  : no"      
    fi
    
    echo ""
  fi
  
else

  echo ""
  echo "Transcoding disabled"
  echo "The encoding library LAME was not found"    
  echo "Please install the LAME library"
  echo "and run ./configure again"
  echo ""
  
fi
